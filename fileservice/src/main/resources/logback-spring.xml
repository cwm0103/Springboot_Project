<?xml version="1.0" encoding="UTF-8"?>
<!--<configuration>-->
    <!--&lt;!&ndash; 彩色日志 &ndash;&gt;-->
    <!--&lt;!&ndash; 彩色日志依赖的渲染类 &ndash;&gt;-->
    <!--<conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />-->
    <!--<conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter" />-->
    <!--<conversionRule conversionWord="wEx"-->
                    <!--converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter" />-->
    <!--&lt;!&ndash; 彩色日志格式 &ndash;&gt;-->
    <!--<property name="CONSOLE_LOG_PATTERN"-->
              <!--value="${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(-&#45;&#45;){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}" />-->

 <!--&lt;!&ndash;尽量别用绝对路径，如果带参数不同容器路径解释可能不同,以下配置参数在pom.xml里 &ndash;&gt;-->
<!--<property name="log.root.level" value="${log.root.level}" /> &lt;!&ndash; 日志级别 &ndash;&gt;-->
<!--<property name="log.other.level" value="${log.other.level}" /> &lt;!&ndash; 其他日志级别 &ndash;&gt;-->
<!--<property name="log.base" value="${log.base}" /> &lt;!&ndash; 日志路径，这里是相对路径，web项目eclipse下会输出到eclipse的安装目录下，如果部署到linux上的tomcat下，会输出到tomcat/bin目录 下 &ndash;&gt;-->
<!--<property name="log.moduleName" value="${log.moduleName}" />  &lt;!&ndash; 模块名称， 影响日志配置名，日志文件名 &ndash;&gt;-->
<!--<property name="log.max.size" value="100MB" /> &lt;!&ndash; 日志文件大小,超过这个大小将被压缩 &ndash;&gt;-->

<!--&lt;!&ndash;控制台输出 &ndash;&gt;-->
<!--<appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">-->
    <!--<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">-->
        <!--<Pattern>%date{yyyy-MM-dd HH:mm:ss.SSS} %-5level[%thread]%logger{56}.%method:%L -%msg%n</Pattern>-->
    <!--</encoder>-->
<!--</appender>-->

<!--&lt;!&ndash; 用来保存输出所有级别的日志 &ndash;&gt;-->
<!--<appender name="file.all" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
    <!--<File>${log.base}/${log.moduleName}.log</File>&lt;!&ndash; 设置日志不超过${log.max.size}时的保存路径，注意如果-->
            <!--是web项目会保存到Tomcat的bin目录 下 &ndash;&gt;-->
    <!--&lt;!&ndash; 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。 &ndash;&gt;-->
    <!--<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
        <!--<FileNamePattern>${log.base}/${log.moduleName}_all_%d{yyyy-MM-dd}.%i.log.zip-->
        <!--</FileNamePattern>-->
        <!--&lt;!&ndash; 文件输出日志 (文件大小策略进行文件输出，超过指定大小对文件备份) &ndash;&gt;-->
        <!--<timeBasedFileNamingAndTriggeringPolicy-->
                <!--class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">-->
            <!--<maxFileSize>${log.max.size}</maxFileSize>-->
        <!--</timeBasedFileNamingAndTriggeringPolicy>-->
    <!--</rollingPolicy>-->
    <!--&lt;!&ndash; 日志输出的文件的格式 &ndash;&gt;-->
    <!--<layout class="ch.qos.logback.classic.PatternLayout">-->
        <!--<pattern>%date{yyyy-MM-dd HH:mm:ss.SSS} %-5level[%thread]%logger{56}.%method:%L -%msg%n</pattern>-->
    <!--</layout>-->
<!--</appender>-->

<!--&lt;!&ndash; 这也是用来保存输出所有级别的日志 &ndash;&gt;-->
<!--<appender name="file.all.other" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
    <!--<File>${log.base}/${log.moduleName}_other.log</File>-->
    <!--<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
        <!--<FileNamePattern>${log.base}/archive/${log.moduleName}_other_%d{yyyy-MM-dd}.%i.log.zip-->
        <!--</FileNamePattern>-->
        <!--<timeBasedFileNamingAndTriggeringPolicy-->
                <!--class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">-->
            <!--<maxFileSize>${log.max.size}</maxFileSize>-->
        <!--</timeBasedFileNamingAndTriggeringPolicy>-->
    <!--</rollingPolicy>-->
    <!--<layout class="ch.qos.logback.classic.PatternLayout">-->
        <!--<pattern>%date{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] %logger{56}.%method:%L -%msg%n</pattern>-->
    <!--</layout>-->
<!--</appender>-->

<!--&lt;!&ndash; 只用保存输出error级别的日志 &ndash;&gt;-->
<!--<appender name="file.error"-->
          <!--class="ch.qos.logback.core.rolling.RollingFileAppender">-->
    <!--<File>${log.base}/${log.moduleName}_err.log</File>-->
    <!--<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
        <!--<FileNamePattern>${log.base}/archive/${log.moduleName}_err_%d{yyyy-MM-dd}.%i.log.zip-->
        <!--</FileNamePattern>-->
        <!--<timeBasedFileNamingAndTriggeringPolicy-->
                <!--class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">-->
            <!--<maxFileSize>${log.max.size}</maxFileSize>-->
        <!--</timeBasedFileNamingAndTriggeringPolicy>-->
    <!--</rollingPolicy>-->
    <!--<layout class="ch.qos.logback.classic.PatternLayout">-->
        <!--<pattern>%date{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] %logger{56}.%method:%L - %msg%n</pattern>-->
    <!--</layout>-->
    <!--&lt;!&ndash; 下面为配置只输出error级别的日志 &ndash;&gt;-->
    <!--<filter class="ch.qos.logback.classic.filter.LevelFilter">-->
        <!--<level>ERROR</level>-->
        <!--<onMatch>ACCEPT</onMatch>-->
        <!--<onMismatch>DENY</onMismatch>-->
    <!--</filter>-->
<!--</appender>-->

<!--&lt;!&ndash; 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 &ndash;&gt;-->
<!--&lt;!&ndash; 更改默认的队列的深度,该值会影响性能.默认值为256 &ndash;&gt;-->
<!--&lt;!&ndash; 添加附加的appender,最多只能添加一个 &ndash;&gt;-->
<!--<appender name="file.async" class="ch.qos.logback.classic.AsyncAppender">-->
    <!--<discardingThreshold>0</discardingThreshold>-->
    <!--<queueSize>256</queueSize>-->
    <!--<includeCallerData>true</includeCallerData>-->
    <!--<appender-ref ref="file.all" />-->
<!--</appender>-->

<!--<appender name="file.async.other" class="ch.qos.logback.classic.AsyncAppender">-->
    <!--<discardingThreshold>0</discardingThreshold>-->
    <!--<queueSize>256</queueSize>-->
    <!--<includeCallerData>true</includeCallerData>-->
    <!--<appender-ref ref="file.all.other" />-->
<!--</appender>-->

<!--&lt;!&ndash; 为某个包下的所有类的指定Appender 这里也可以指定类名称例如：com.aa.bb.ClassName &ndash;&gt;-->
<!--<logger name="com.filemanage" additivity="false">-->
    <!--<level value="${log.root.level}" />-->
    <!--<appender-ref ref="stdout" />-->
    <!--<appender-ref ref="file.async" />&lt;!&ndash; 即com.lin包下级别为 ${log.root.level}的才会使用file.async来打印 &ndash;&gt;-->
    <!--<appender-ref ref="file.error" />-->
<!--</logger>-->

<!--&lt;!&ndash; root将级别为${log.root.level}及大于${log.root.level}的日志信息交给已经配置好的名为“Console”的appender处理，“Console”appender将信息打印到Console,其它同理 &ndash;&gt;-->
<!--<root level="${log.root.level}">-->
    <!--<appender-ref ref="stdout" /> &lt;!&ndash;  标识这个appender将会添加到这个logger &ndash;&gt;-->
    <!--<appender-ref ref="file.async.other" />-->
    <!--<appender-ref ref="file.error" />-->
<!--</root>-->
<!--</configuration>-->
<configuration>
    <!-- 彩色日志 -->
    <!-- 彩色日志依赖的渲染类 -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />
    <conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter" />
    <conversionRule conversionWord="wEx"
                    converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter" />
    <!-- 彩色日志格式 -->
    <property name="CONSOLE_LOG_PATTERN"
              value="${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}" />
    <!-- 控制台打印日志的相关配置 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!-- 日志格式 -->
        <encoder>
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
        </encoder>
        <!-- 日志级别过滤器 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!-- 过滤的级别 -->
            <!--<level>ERROR</level>-->
            <!--<level>WARN</level>-->
            <!--<level>INFO</level>-->
            <!-- 匹配时的操作：接收（记录） -->
            <onMatch>ACCEPT</onMatch>
            <!-- 不匹配时的操作：拒绝（不记录） -->
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 文件保存日志的相关配置 -->
    <appender name="ERROR-OUT" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 保存日志文件的路径 -->
        <file>fileservice/logs/error.log</file>
        <!-- 日志格式 -->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} [%class:%line] - %m%n</pattern>
        </encoder>
        <!-- 日志级别过滤器 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!-- 过滤的级别 -->
            <!--<level>ERROR</level>-->
            <!-- 匹配时的操作：接收（记录） -->
            <onMatch>ACCEPT</onMatch>
            <!-- 不匹配时的操作：拒绝（不记录） -->
            <onMismatch>DENY</onMismatch>
        </filter>
        <!-- 循环政策：基于时间创建日志文件 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 日志文件名格式 -->
            <fileNamePattern>error.%d{yyyy-MM-dd}.log</fileNamePattern>
            <!-- 最大保存时间：30天-->
            <maxHistory>30</maxHistory>
        </rollingPolicy>
    </appender>



    <!--自定义日志记录配置-->
    <!-- 时间滚动输出 level为 monitor 日志 -->
    <appender name="file—monitor"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>fileservice/logs/log.log</file>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>D:/logs/monitor.%d{yyyy-MM-dd}.log</FileNamePattern>
            <MaxHistory>30</MaxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>%date [%thread] %-5level %logger{80} - %msg%n</pattern>
        </encoder>
    </appender>
    <!-- 基于dubug处理日志：具体控制台或者文件对日志级别的处理还要看所在appender配置的filter，如果没有配置filter，则使用root配置 -->
    <root level="info">
        <appender-ref ref="STDOUT" />
        <appender-ref ref="ERROR-OUT" />
    </root>
    <!--自定义日志记录-->
    <logger name="monitor" additivity="false">
        <appender-ref ref="file—monitor"/>
    </logger>
</configuration>